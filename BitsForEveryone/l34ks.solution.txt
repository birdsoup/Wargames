To get the flag, input %x%x%x %x %x %x %x %x %x %x %x %x
And convert the output starting from the 4th %x from hex to string

This one was pretty interesting. It stressed your knowledge of how x86 argument passing works. By reverse engineering the program, I saw that it was reading the flag and storing it on the stack. However, there was no way to pass the address of the flag into printf, the only place where it could print some sort of output for you. The only thing you have control over is the input to the printf call. By running the program it seemed to only print out what you typed. However, if printf encountered a %, it would treat it as a format specified, and start looking on the stack for more stuff to print. For example if you call printf("Hello world") it would just print Hello world, but if you call printf("Hello %s"), it would start looking for a string to print on the caller's stack. So we can advantage of the fact that the flag is stored on the stack and simply pass in a bunch of format specifiers so that it would eventually print out the entire stack for us, revealing the flag.
